[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2023-11-14 14:47:39.149973",
  "module": "Impala",
  "name": "Purchase Order Form",
  "script": "frappe.ui.form.on('Purchase Order', {\n    validate(frm){\n    //   set_taxes(frm)  \n        var include = 0\n\t\tif(frm.doc.custom_tax_type == \"Inclusive\"){\n\t\t    include = 1\n\t\t}\n\t\tfor(var d in frm.doc.taxes){\n\t\t    frappe.model.set_value(\"Purchase Taxes and Charges\",frm.doc.taxes[d].name,\"included_in_print_rate\", include)\n\t\t}\n\t\t\n\t\tfrm.refresh_field(\"taxes\")\n        set_govt_tax(frm)\n    },\n\ttax_type(frm) {\n\t    var include = 0\n\t\tif(frm.doc.custom_tax_type == \"Inclusive\"){\n\t\t    include = 1\n\t\t}\n\t\t\n\t\tfor(var i in frm.doc.items){\n\t\t    var d = frm.doc.items[i];\n\t\t    var rate = d.price;\n\t\t    var price = d.price;\n\t\t    if(include == 1){\n\t\t        rate = flt(d.price)+ (flt(d.price)*(flt(d.custom_total_tax_percentage)/100))\n\t\t    }\n\t\t    else{\n\t\t        rate = d.price;\n\t\t    }\n\t\t    console.log(rate)\n\t\t    frappe.model.set_value(d.doctype,d.name,\"rate\", flt(rate))\n\t\t  //  frappe.model.set_value(d.doctype,d.name,\"price\", flt(price))\n\t\t}\n\t\tfrm.refresh_field(\"items\")\n\t\t\n\t\tfor(var d in frm.doc.taxes){\n\t\t  //  frm.doc.taxes[d].included_in_print_rate = include;\n\t\t    frappe.model.set_value(\"Purchase Taxes and Charges\",frm.doc.taxes[d].name,\"included_in_print_rate\", include)\n\t\t}\n\t\t\n\t\tfrm.refresh_field(\"taxes\")\n\t},\n\trefresh(frm){\n\t    \n\t    if(frm.doc.__islocal){\n\t        \n\t        frm.add_custom_button(__('BOQ'),\n    \t\t    \n    \t\t\tfunction() {\n    \t\t\t\t\terpnext.utils.map_current_doc({\n    \t\t\t\t\t\tmethod: \"aqiq_projects.projects_changes.make_po_boq\",\n    \t\t\t\t\t\tsource_doctype: \"BOQ\",\n    \t\t\t\t\t\ttarget:frm,\n    \t\t\t\t\t\tsetters: {\n    \t\t\t\t// \t\t\tsupplier:frm.doc.supplier,\n    \t\t\t\t\t\t\tproject:frm.doc.project,\n    \t\t\t\t\t\t},\n    \t\t\t\t\t\tdate_field: \"date\",\n    \t\t\t\t\t\tget_query_filters: {\n    \t\t\t\t\t\t\tdocstatus: 1,\n    \t\t\t\t\t\t\tcompany:frm.doc.company,\n    \t\t\t\t\t\t\tsub_contracting_completed:0,\n    \t\t\t\t\t\t}\n    \t\t\t\t\t})\n    \t\t\t\t\t\n    \t\t\t}, __(\"Get items from\"));\n\t    }\n\t    \n\t    if(frm.doc.docstatus == 1){\n    \t    \n    \t    frm.add_custom_button(__('Imported Items Packing Item'),\n\t\t\tfunction() {\n\t\t\t\tfrappe.model.open_mapped_doc({\n        \t\t\tmethod: \"impala.impala.doctype.imported_items_packing.imported_items_packing.make_imported_items\",\n        \t\t\tfrm: frm\n        \t\t})\n\t\t\t}, __(\"Create\"));\n\t    }\n\t    \n\t    for(var d in frm.doc.items){\n\t        console.log(frm.doc.items[d].rate)\n\t        console.log(frm.doc.items[d].base_rate)\n\t        console.log(frm.doc.items[d].net_rate)\n\t    }\n\t    set_company_wise_query(frm)\n\t},\n\tsetup(frm) {\n\t\tset_company_wise_query(frm)\n\t},\n\tonload_post_render(frm) {\n\t\tset_company_wise_query(frm)\n\t},\n\ttax_category(frm) {\n\t\tget_tax_category_account(frm)\n\t},\n\tcompan(frm) {\n\t\tget_tax_category_account(frm)\n\t},\n})\n\nvar get_tax_category_account = function(frm){\n    frappe.call({\n        method:\"impala.doctype_changes_purchase_order.get_tax_category_account\",\n        args:{'company': frm.doc.company, \"tax_category\": frm.doc.tax_category},\n        callback:function(r){\n            frm.set_value(\"import_purchase_account\", r.message)\n        }\n    })\n}\n\nvar set_company_wise_query = function(frm){\n\tcur_frm.set_query(\"item_code\", \"items\", function(frm, cdt, cdn) {\n    \treturn {\n\t\t\tquery: \"erpnext.controllers.queries.item_query\",\n    \t    filters:{\"company\": cur_frm.doc.company}\n\t\t};\n    });\n    \n    cur_frm.set_query(\"supplier\",function() {\n    \treturn {\n    \t    filters:{\"company\": cur_frm.doc.company}\n    \t}\n    });\n}\n\nfrappe.ui.form.on('Purchase Order Item', {\n    item_code(frm,cdt,cdn) {\n        var d = locals[cdt][cdn];\n        console.log(\"before_delay\")\n        console.log(d.rate)\n        console.log(d.item_tax_template)\n        frappe.run_serially([\n\t        () => frappe.timeout(0.9),\n\t        () => {\n\t            console.log(\"after_delay\")\n\t            console.log(d.rate)\n                console.log(d.item_tax_template)\n                if(d.item_tax_template){\n                    frappe.call({\n                        method:\"impala.doctype_changes_purchase_order.get_total_tax_per\",\n                        args:{'template':d.item_tax_template},\n                        callback:function(r){\n                            frappe.model.set_value(cdt,cdn,\"custom_total_tax_percentage\", r.message)\n                            frappe.model.set_value(cdt,cdn,\"price\", d.price_list_rate)\n                            var include = 0;\n                            if(frm.doc.custom_tax_type == \"Inclusive\"){\n                                include = 1\n                                frappe.model.set_value(cdt,cdn,\"rate\", flt(d.price)+ (flt(d.price)*(flt(d.custom_total_tax_percentage)/100)))\n                            }\n                            else{\n                                frappe.model.set_value(cdt,cdn,\"rate\", d.price)\n                            }\n                            \n                            frappe.run_serially([\n                    \t        () => frappe.timeout(0.9),\n                    \t        () => {\n                \t                for(var d in frm.doc.taxes){\n                            \t\t    frappe.model.set_value(\"Purchase Taxes and Charges\",frm.doc.taxes[d].name,\"included_in_print_rate\", include)\n                            \t\t}\n                            \t\t\n                            \t\tfrm.refresh_field(\"taxes\")\n                \t            },\n                            ])\n                        }\n                    })\n                }\n\t        },\n        ])\n    },\n    rate(frm,cdt,cdn) {\n        var d = locals[cdt][cdn];\n        // set_taxes(frm)\n    }\n});\n\nvar set_govt_tax = function(frm){\n    var taxes = frm.doc.taxes\n    frm.doc.taxes = []\n    for(var i in taxes){\n        if(!taxes[i].duplicated_row_added){\n            frm.add_child(\"taxes\", taxes[i])\n        }\n    }\n    \n    taxes = frm.doc.taxes\n    if(frm.doc.import_purchase_account){\n        for(var d in taxes){\n            var obj = taxes[d];\n            var i = frm.add_child(\"taxes\")\n            i.charge_type = obj.charge_type\n            i.account_head = obj.account_head;\n            i.tax_amount = obj.tax_amount\n            i.add_deduct_tax= \"Deduct\"\n            i.included_in_print_rate= obj.included_in_print_rate\n            i.duplicated_row_added = 1\n            i.cost_center = obj.cost_center\n            i.custom_department = obj.custom_department\n            i.custom_project = obj.custom_project\n            i.category = obj.category\n            i.description = obj.description\n        }\n    }\n}\n\nfrappe.ui.form.on('Purchase Order Task', {\n    status(frm,cdt,cdn) {\n        var d = locals[cdt][cdn];\n        if(d.status == \"Completed\"){\n            frappe.model.set_value(cdt,cdn,\"ac_date\", frappe.datetime.get_today())\n        }\n    },\n});\n\n// // frappe.ui.form.on('Purchase Taxes and Charges', {\n// //     taxes_add(frm,cdt,cdn) {\n// //         var d = locals[cdt][cdn];\n// //         var include = 0\n// // \t\tif(frm.doc.tax_type == \"Inclusive\"){\n// // \t\t    include = 1\n// // \t\t}\n\n// // \t\tfrappe.model.set_value(cdt,cdn,\"included_in_print_rate\", include)\n// //     },\n// // });\n\nfrappe.ui.form.on('Purchase Order Payment Schedule', {\n    status(frm,cdt,cdn) {\n        var d = locals[cdt][cdn];\n        if(d.status == \"Completed\"){\n            frappe.model.set_value(cdt,cdn,\"ac_date\", frappe.datetime.get_today())\n        }\n    },\n    \n    amount(frm,cdt,cdn) {\n        var d = locals[cdt][cdn];\n        frappe.model.set_value(cdt,cdn,\"base_amount\", flt(d.ex_rate) * flt(d.amount))\n    },\n    ex_rate(frm,cdt,cdn) {\n        var d = locals[cdt][cdn];\n        frappe.model.set_value(cdt,cdn,\"base_amount\", flt(d.ex_rate) * flt(d.amount))\n    },\n    base_amount(frm,cdt,cdn) {\n        var d = locals[cdt][cdn];\n        frappe.model.set_value(cdt,cdn,\"amount\", flt(d.base_amount)/flt(d.ex_rate))\n    },\n});\n\n// frappe.ui.form.on('Purchase Order Shipment', {\n//     // es(frm,cdt,cdn) {\n//     //     var d = locals[cdt][cdn];\n//     //     if(!d.ac){\n//     //         frappe.model.set_value(cdt,cdn,\"ac\", d.es)\n//     //     }\n//     //     set_shipment_date(frm)\n//     // },\n//     // days(frm,cdt,cdn) {\n//     //     var d = locals[cdt][cdn];\n//     //     if(d.idx != 1){\n//     //         // var last_date = frm.doc.purchase_order_shipment[d.idx-2].ac\n//     //         // frappe.model.set_value(cdt,cdn,\"ac\", frappe.datetime.add_days(last_date, d.days))\n//     //     }\n//     //     set_shipment_date(frm)\n//     // },\n//     // ac(frm,cdt,cdn) {\n//     //     var d = locals[cdt][cdn];\n//     //     set_shipment_date(frm)\n//     // },\n// });\n\nvar set_shipment_date = function(frm){\n    for(var d in frm.doc.purchase_order_shipment){\n        var obj = frm.doc.purchase_order_shipment[d]\n        console.log(d)\n        if(obj.type == \"Auto\"){\n            if(d == 0){\n                // obj.ac = frm.doc.transaction_date;\n                obj.ac = frappe.datetime.add_days(frm.doc.transaction_date, obj.days)\n                var last_date = obj.ac\n            }\n            else{\n                // obj.days = dateutil.get_diff(obj.ac, last_date)\n                obj.ac = frappe.datetime.add_days(last_date, obj.days)\n            }\n            var last_date = obj.ac\n            \n        }\n    }\n    frm.refresh_field(\"purchase_order_shipment\")\n}\n\n// var set_taxes = function(frm){\n//     var items = frm.doc.items;\n//     var cost_center_wise = {}\n//     var cost_center_wise_tax = {}\n//     for(var d in items){\n//         var obj = items[d]\n//         if(obj.total_tax_percentage){\n//             if(cost_center_wise[obj.cost_center]){\n//                 cost_center_wise[obj.cost_center] += obj.net_amount\n//                 cost_center_wise_tax[obj.cost_center] += flt(obj.net_amount)*(flt(obj.total_tax_percentage)/100)\n//             }\n//             else{\n//                 cost_center_wise[obj.cost_center] = obj.net_amount\n//                 cost_center_wise_tax[obj.cost_center] = flt(obj.net_amount)*(flt(obj.total_tax_percentage)/100)\n//             }\n//         }\n//     }\n//     console.log(cost_center_wise)\n//     console.log(cost_center_wise_tax)\n//     var account = \"VAT - IG\"\n//     if(frm.doc.company != \"Impala Glass Industries Ltd\"){\n//         account = \"VAT - IAL\";\n//     }\n//     frm.doc.taxes = []\n//     var add_deduct_tax = \"Add\"\n//     if(frm.doc.tax_type == \"Inclusive\"){\n//         add_deduct_tax = \"Deduct\"\n//     }\n//     for(var t in cost_center_wise){\n//         var i = frm.add_child(\"taxes\")\n//         i.charge_type = \"Actual\"\n//         i.account_head = account;\n//         i.tax_amount = cost_center_wise_tax[t]\n//         i.add_deduct_tax=add_deduct_tax\n//         i.included_in_print_rate=0\n//         console.log(cost_center_wise_tax[t])\n//         // i.total = cost_center_wise_tax[t] + cost_center_wise[t]\n//         i.cost_center = t\n//     }\n//     frm.refresh_field(\"taxes\")\n// }",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Address",
  "enabled": 1,
  "modified": "2024-04-26 23:05:28.047105",
  "module": "Estes Api",
  "name": "Address",
  "script": "frappe.ui.form.on('Address', {\n    onload: function(frm) {\n        var html_field = frm.fields_dict['custom_address'].wrapper;\n\n        var label = document.createElement('label');\n        label.innerHTML = 'Create An Autocomplete field';\n        label.setAttribute('class', 'form-label mb-2');\n\n        var input = document.createElement('input');\n        input.setAttribute('type', 'text');\n        input.setAttribute('class', 'form-control');\n        input.setAttribute('placeholder', 'Enter address...');\n\n        var suggestionsContainer = $('<div>').attr('id', 'suggestions-container');\n        suggestionsContainer.css('margin-top', '5px');\n\n        html_field.appendChild(label);\n        html_field.appendChild(input);\n        html_field.appendChild(suggestionsContainer[0]);\n    },\n\n    refresh: function(frm) {\n        var inputField = frm.fields_dict['custom_address'].wrapper.querySelector('input');\n        var suggestionsContainer = $('#suggestions-container');\n        \n        inputField.addEventListener('input', function(event) {\n            var query = event.target.value;\n            if (query.length > 2) {\n                frappe.call({\n                    method: 'estes_api.rest.autocomplete',\n                    args: {\n                        query: query\n                    },\n                    callback: function(data) {\n                        console.log(\"Autocomplete data:\", data);\n                        suggestionsContainer.empty();\n                        if (data && Array.isArray(data.message)) {\n                            data.message.forEach(function(address) {\n                                if (address.address_line1 && address.city && address.country && address.postcode) {\n                                    var formattedAddress = '<button class=\"btn btn-outline-primary suggestion\" style=\"margin-right: 5px;\"';\n                                    formattedAddress += ' data-address=\\'' + JSON.stringify(address) + '\\'>';\n                                    formattedAddress += '<b>' + address.address_line1 + '</b>' + ', ' + address.city + ', ' + address.country + ', ';\n                                    formattedAddress += '<b>' + address.postcode + '</b>';\n                                    formattedAddress += '</button>';\n                                    suggestionsContainer.append(formattedAddress);\n                                }\n                            });\n                            suggestionsContainer.show(); \n                        } else {\n                            console.error(\"Invalid or empty data returned:\", data);\n                        }\n                    },\n                    error: function(err) {\n                        console.error(\"Error while fetching autocomplete data:\", err);\n                    }\n                });\n            } else {\n                console.log(\"Query length is less than 3 characters, clearing suggestions.\");\n                suggestionsContainer.empty().hide(); \n            }\n        });\n\n        suggestionsContainer.on('click', '.suggestion', function() {\n            var selectedAddress = $(this).data('address');\n            if (selectedAddress) {\n                console.log(\"Selected address:\", selectedAddress);\n                setAddressValues(selectedAddress, frm);\n                inputField.value = ''; \n                suggestionsContainer.empty().hide();\n            } else {\n                console.error(\"No address data found.\");\n            }\n        });\n    }\n});\n\nfunction setAddressValues(address, frm) {\n    console.log(\"Setting address values:\", address);\n    frm.set_value('country', address.country || '');\n    frm.set_value('address_title', address.address_line1 || '');\n    frm.set_value('city', address.city || '');\n    frm.set_value('state', address.state || '');\n    frm.set_value('county', address.county || '');\n    frm.set_value('pincode', address.postcode || '');\n    frm.set_value('address_line1', address.address_line1 || '');\n    frm.set_value('address_line2', address.formatted || '');\n    frm.set_value('custom_timezone', address.timezone || '');\n    frm.set_value('custom_bbox_lat1', address.bbox ? address.bbox.lat1 || '' : '');\n    frm.set_value('custom_bbox_lon1', address.bbox ? address.bbox.lon1 || '' : '');\n    \n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Address",
  "enabled": 1,
  "modified": "2024-04-24 16:22:49.471369",
  "module": null,
  "name": "Addere",
  "script": "frappe.ui.form.on('Address', {\n    onload_post_render: async function(frm) {\n        // JSON data stored as a variable\n        var customerData = [\n            {\"name\": \"Customer A\", \"id\": \"CUST001\"},\n            {\"name\": \"Customer B\", \"id\": \"CUST002\"},\n            {\"name\": \"Customer C\", \"id\": \"CUST003\"}\n        ];\n        \n        // Format data as options for Autocomplete field\n        var options = customerData.map(function(customer) {\n            return customer.name;\n        });\n\n        // Set Autocomplete field options\n        cur_frm.fields_dict.custom_test2.df.options = options;\n        cur_frm.fields_dict.custom_test2.refresh();\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2024-04-26 23:40:55.809746",
  "module": "Estes Api",
  "name": "Quotation",
  "script": "frappe.ui.form.on('Quotation', {\r\n   custom_get_rate_quote: function(frm) {\r\n    //   frm.set_df_property('custom_shipping_quote_rate', 'hidden', 0);\r\n    frappe.call({\r\n    method: 'frappe.client.get_value',\r\n    args: {\r\n        'doctype': 'Estes API',\r\n        'filters': {},\r\n        'fieldname': ['estes_account_number']\r\n    },\r\n    callback: function(response) {\r\n        if(response.message) {\r\n            var estes_account_number = response.message.estes_account_number;\r\n            // Now you can use the estes_user variable\r\n            console.log(estes_account_number);\r\n\r\n\r\n        var accessorials_list = [];\r\n        console.log(frm.doc.custom_accessorials);\r\n        \r\n    \r\n        if(frm.doc.custom_accessorials==0) {\r\n            // console.log(\"hae there\");\r\n                var request_data = {\r\n                    \"requestID\": \"test1234\",\r\n                    \"account\": estes_account_number,\r\n                    \"originPoint\": {\r\n                        \"countryCode\": frm.doc.custom_original_country_code,\r\n                        \"postalCode\": frm.doc.custom_original_postal_code,\r\n                        \"city\": frm.doc.custom_original_city,\r\n                        \"stateProvince\": frm.doc.custom_original_state\r\n                    },\r\n                    \"destinationPoint\": {\r\n                        \"countryCode\": frm.doc.custom_destination_country_code,\r\n                        \"postalCode\": frm.doc.custom_destination_postal_code.split('-')[0],\r\n                        \"city\": frm.doc.custom_destination_city,\r\n                        \"stateProvince\": frm.doc.custom_destination_state\r\n                    },\r\n                    \"payor\": \"S\",\r\n                    \"terms\": \"PPD\",\r\n                    \"stackable\": \"N\",\r\n                    \"baseCommodities\": {\r\n                        \"commodity\": {\r\n                            \"class\": frm.doc.custom_commodity_class,\r\n                            \"weight\": frm.doc.custom_commodity_weight\r\n                        }\r\n                    }\r\n                };\r\n                var data = JSON.stringify(request_data);\r\n                var charge=[]\r\n                var test_charge=[];\r\n                frappe.call({\r\n                    //method: 'email_delivery_service.rest.get_total_prices',\r\n                    method: 'estes_api.rest.get_total_prices',\r\n                    args: {\r\n                        data: data\r\n                    },\r\n                    callback: function(r) {\r\n                        // Log the response\r\n                        // console.log(r);\r\n    \r\n                        // Check if the response contains a message\r\n                        if (r.message && r.message.length > 0 && r.message[0].total_price !== undefined) {\r\n                            // Show alert for successful rate creation\r\n                            frappe.show_alert(__('Rate created successfully'), 5);\r\n                            // Log the total price\r\n                            // console.log(\"Total Price:\", r.message[0].total_price);/\\\r\n                            var price = parseFloat(r.message[0].total_price);\r\n                            var t = price * 0.5;\r\n                            var total_freight = price + t + 60;\r\n                            total_freight = total_freight.toFixed(2);\r\n\r\n                            \r\n                            frm.doc.custom_shipping_quote_rate = [];\r\n                            for (var d in r.message) {\r\n                                var i = frm.add_child(\"custom_shipping_quote_rate\", {\r\n                                    \"quote_number\": r.message[d].quote_number,\r\n                                    \"service_level\": r.message[d].service_level,\r\n                                    \"total_price\": r.message[d].total_price,\r\n                                    \"cartage_fee\":\"60\",\r\n                                    \"total_freight\":total_freight,\r\n                                });\r\n                            }\r\n                            frm.refresh_field(\"custom_shipping_quote_rate\");\r\n                            var total_freights=0;\r\n                            for (var i = 0; i < frm.doc.custom_shipping_quote_rate.length; i++) {\r\n                                total_freights=parseFloat(total_freights)+parseFloat(frm.doc.custom_shipping_quote_rate[i].total_freight)\r\n                            }\r\n                            if (frm.doc.taxes.length === 0) {\r\n    var i = frm.add_child(\"taxes\", {\r\n        \"charge_type\": \"Actual\",\r\n        \"account_head\": \"460400 - Sales - Freight - DCC\",\r\n        \"description\": \"Freight\",\r\n        \"tax_amount\": total_freights,\r\n    });\r\n    frm.refresh_field(\"taxes\");\r\n} else {\r\n    var freightExists = false;\r\n    for (var i = 0; i < frm.doc.taxes.length; i++) {\r\n        console.log(frm.doc.taxes[i].description);\r\n        if (frm.doc.taxes[i].description === \"Freight\") {\r\n            frm.doc.taxes[i].tax_amount = total_freights;\r\n            freightExists = true;\r\n            break; // No need to continue the loop once found\r\n        }\r\n    }\r\n    if (!freightExists) {\r\n        var i = frm.add_child(\"taxes\", {\r\n            \"charge_type\": \"Actual\",\r\n            \"account_head\": \"460400 - Sales - Freight - DCC\",\r\n            \"description\": \"Freight\",\r\n            \"tax_amount\": total_freights,\r\n        });\r\n    }\r\n    frm.refresh_field(\"taxes\");\r\n}                        \r\n                            \r\n//                                var i = frm.add_child(\"taxes\", {\r\n//                                    \"charge_type\": \"Actual\",\r\n//                                    \"account_head\": \"460400 - Sales - Freight - DCC\",\r\n//                                    \"description\": \"Freight\",\r\n//                                    \"tax_amount\":total_freight,\r\n//                                });\r\n//                            \r\n//                            frm.refresh_field(\"taxes\");\r\n                            \r\n                        } else {\r\n                            frappe.show_alert(__('An Error Occurred'), 5, 'danger');\r\n                            console.log(\"No rate quote found in the response.\");\r\n                        }\r\n                    },\r\n                    error: function(xhr, textStatus, errorThrown) {\r\n                        // Handle the error\r\n                        frappe.show_alert(__('An Error Occurred') + ': ' + errorThrown, 5, 'danger');\r\n                        console.error(\"Error:\", errorThrown);\r\n    \r\n                    }\r\n                });\r\n        } else {\r\n            for (var i = 0; i < frm.doc.custom_accessorials.length; i++) {\r\n                if(frm.doc.custom_accessorials.length===0){\r\n                    console.log(\"am near there\");\r\n                }\r\n                accessorials_list = frm.doc.custom_accessorials[i].accessorials;\r\n                var request_data = {\r\n                    \"requestID\": \"test1234\",\r\n                    \"account\": estes_account_number,\r\n                    \"originPoint\": {\r\n                        \"countryCode\": frm.doc.custom_original_country_code,\r\n                        \"postalCode\": frm.doc.custom_original_postal_code,\r\n                        \"city\": frm.doc.custom_original_city,\r\n                        \"stateProvince\": frm.doc.custom_original_state\r\n                    },\r\n                    \"destinationPoint\": {\r\n                        \"countryCode\": frm.doc.custom_destination_country_code,\r\n                        \"postalCode\": frm.doc.custom_destination_postal_code.split('-')[0],\r\n                        \"city\": frm.doc.custom_destination_city,\r\n                        \"stateProvince\": frm.doc.custom_destination_state\r\n                    },\r\n                    \"payor\": \"S\",\r\n                    \"terms\": \"PPD\",\r\n                    \"stackable\": \"N\",\r\n                    \"baseCommodities\": {\r\n                        \"commodity\": {\r\n                            \"class\": frm.doc.custom_commodity_class,\r\n                            \"weight\": frm.doc.custom_commodity_weight\r\n                        }\r\n                    }\r\n                };\r\n    \r\n                 request_data['accessorials'] = accessorials_list;\r\n    \r\n                // Convert the request data object to a JSON string\r\n                var data = JSON.stringify(request_data);\r\n                var charge = [];\r\n                var test_charge = [];\r\n                var quote_number_data = \"\";\r\n                var service_level_data = \"\";\r\n    \r\n                // Wrap the frappe.call function in a promise\r\n                function getTotalPrices() {\r\n                    return new Promise(function(resolve, reject) {\r\n                        frappe.call({\r\n                            //method: 'email_delivery_service.rest.get_total_prices',\r\n                            method: 'estes_api.rest.get_total_prices',\r\n                            args: {\r\n                                data: data\r\n                            },\r\n                            callback: function(r) {\r\n                                if (r.message && r.message.length > 0 && r.message[0].total_price !== undefined) {\r\n                                    // Show alert for successful rate creation\r\n                                    frappe.show_alert(__('Rate created successfully'), 5);\r\n                                    var sum = r.message[0].total_price - r.message[0].accessorial_charge;\r\n                                    charge.push(sum);\r\n                                    test_charge.push(r.message[0].total_price);\r\n                                    quote_number_data = r.message[0].quote_number;\r\n                                    service_level_data = r.message[0].service_level;\r\n                                    resolve(r);\r\n                                } else {\r\n                                    // Reject the promise if no rate quote found in the response\r\n                                    reject(new Error(\"No rate quote found in the response.\"));\r\n                                }\r\n                            },\r\n                            error: function(xhr, textStatus, errorThrown) {\r\n                                // Handle the error\r\n                                frappe.show_alert(__('An Error Occurred') + ': ' + errorThrown, 5, 'danger');\r\n                                console.error(\"Error:\", errorThrown);\r\n    \r\n                                reject(new Error(errorThrown));\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n    \r\n                // Call the function and use the promise\r\n                getTotalPrices()\r\n                    .then(function(response) {\r\n                        var sum = 0;\r\n                        for (var i = 0; i < test_charge.length; i++) {\r\n                            var difference = test_charge[i] - charge[0];\r\n                            sum += difference;\r\n                        }\r\n                        var result = sum + charge[0];\r\n                        // console.log(\"Sum of differences:\", result);\r\n                        var price = parseFloat(result);\r\n                        var t = price * 0.5;\r\n                        var total_freight = price + t + 60;\r\n                        total_freight = total_freight.toFixed(2);\r\n\r\n                        frm.doc.custom_shipping_quote_rate = [];\r\n                        var i = frm.add_child(\"custom_shipping_quote_rate\", {\r\n                            \"quote_number\": quote_number_data,\r\n                            \"service_level\": service_level_data,\r\n                            \"total_price\": result,\r\n                            \"cartage_fee\":\"60\",\r\n                            \"total_freight\":total_freight,\r\n                        });\r\n                        frm.refresh_field(\"custom_shipping_quote_rate\");\r\n                         var total_freights=0;\r\n                            for (var i = 0; i < frm.doc.custom_shipping_quote_rate.length; i++) {\r\n                                total_freights=parseFloat(total_freights)+parseFloat(frm.doc.custom_shipping_quote_rate[i].total_freight)\r\n                            }\r\n                       if (frm.doc.taxes.length === 0) {\r\n    var i = frm.add_child(\"taxes\", {\r\n        \"charge_type\": \"Actual\",\r\n        \"account_head\": \"460400 - Sales - Freight - DCC\",\r\n        \"description\": \"Freight\",\r\n        \"tax_amount\": total_freights,\r\n    });\r\n    frm.refresh_field(\"taxes\");\r\n} else {\r\n    var freightExists = false;\r\n    for (var i = 0; i < frm.doc.taxes.length; i++) {\r\n        console.log(frm.doc.taxes[i].description);\r\n        if (frm.doc.taxes[i].description === \"Freight\") {\r\n            frm.doc.taxes[i].tax_amount = total_freights;\r\n            freightExists = true;\r\n            break; // No need to continue the loop once found\r\n        }\r\n    }\r\n    if (!freightExists) {\r\n        var i = frm.add_child(\"taxes\", {\r\n            \"charge_type\": \"Actual\",\r\n            \"account_head\": \"460400 - Sales - Freight - DCC\",\r\n            \"description\": \"Freight\",\r\n            \"tax_amount\": total_freights,\r\n        });\r\n    }\r\n    frm.refresh_field(\"taxes\");\r\n}\r\n                    })\r\n                    .catch(function(error) {\r\n                        // Handle any errors\r\n                        console.error(\"Error:\", error.message);\r\n                    });\r\n    \r\n                // Timeout to console the promise after a while\r\n                setTimeout(function() {\r\n                    console.log(\"Timeout reached. Promise:\", getTotalPrices());\r\n                }, 3000); \r\n            }\r\n        }\r\n        // frm.set_df_property('custom_get_rate_quote', 'hidden', 1);\r\n        // frm.refresh_field(\"custom_get_rate_quote\");\r\n        } else {\r\n            frappe.msgprint('Error: Unable to fetch Estes API user');\r\n        }\r\n    }\r\n});\r\n    }\r\n    ,\r\n//    transporter(frm){\r\n//        if(frm.doc.transporter===\"Estes Express Lines\"){\r\n//        console.log(frm.doc.transporter)\r\n//                if (!frm.doc.customer_name) {\r\n//            frappe.msgprint(\"First select the customer to make this work\");\r\n//            frm.set_value(\"transporter\", \"\");\r\n//            refresh_field(\"transporter\");\r\n//            \r\n//        } else {\r\n    customer_name(frm){\r\n        if (!frm.doc.customer_name && frm.doc.transporter!==\"Estes Express Lines\" ) {\r\n        console.log(frm.doc.customer_name);\r\n        } else {\r\n            // Set properties to show/hide fields\r\n            frm.set_df_property('custom_use_estes_express_shipping_rate', 'read_only', 1);\r\n            frm.set_df_property('custom_company_shipping_address', 'hidden', 0);\r\n            frm.set_df_property('custom_get_rate_quote', 'hidden', 0);\r\n            frm.set_df_property('custom_destination_city', 'hidden', 0);\r\n            frm.set_df_property('custom_destination_state', 'hidden', 0);\r\n            frm.set_df_property('custom_destination_postal_code', 'hidden', 0);\r\n            frm.set_df_property('custom_destination_country', 'hidden', 0);\r\n            frm.set_df_property('custom_original_city', 'hidden', 0);\r\n            frm.set_df_property('custom_original_state', 'hidden', 0);\r\n            frm.set_df_property('custom_original_postal_code', 'hidden', 0);\r\n            frm.set_df_property('custom_original_country', 'hidden', 0);\r\n            frm.set_df_property('custom_original_country_code', 'hidden', 0);\r\n            frm.set_df_property('custom_destination_country_code', 'hidden', 0);\r\n            frm.set_df_property('custom_commodity_class', 'hidden', 0);\r\n            frm.set_df_property('custom_commodity_weight', 'hidden', 0);\r\n            frm.set_df_property('custom_accessorials', 'hidden', 0);\r\n\r\n            // Get customer address details\r\n            frappe.call({\r\n                method: 'frappe.client.get_value',\r\n                args: {\r\n                    'doctype': 'Address',\r\n                    //'filters': {'name': frm.doc.customer_address},\r\n                    'filters': {'name': frm.doc.shipping_address_name},\r\n                    'fieldname': [\r\n                        'city',\r\n                        'state',\r\n                        'country',\r\n                        'pincode'\r\n                        //'custom_accessorials'\r\n                    ]\r\n                },\r\n                callback: function(r) {\r\n                    if (!r.exc) {\r\n                        console.log(r.message);\r\n                        frm.set_value(\"custom_destination_city\", r.message.city);\r\n                        frm.set_value(\"custom_destination_state\", r.message.state);\r\n                        frm.set_value(\"custom_destination_postal_code\", r.message.pincode);\r\n                        frm.set_value(\"custom_destination_country\", r.message.country);\r\n                        //frm.set_value(\"custom_accessorials\", r.message.custom_accessorials);\r\n                        //refresh_field(\"custom_accessorials\");\r\n                    }\r\n                }\r\n            });\r\n//      }\r\n        }\r\n    },\r\n    \r\n    refresh: function(frm) {\r\n        \tconsole.log(frm.doc.taxes)\r\n        frm.set_query(\"custom_company_shipping_address\", function () {\r\n            return {\r\n                filters: {\r\n                    is_your_company_address: 1\r\n                }\r\n            };\r\n        });\r\n        if(!frm.doc.__islocal){\r\n            frm.set_df_property('custom_shipping_quote_rate', 'hidden', 0);\r\n            frm.set_df_property('custom_use_estes_express_shipping_rate', 'read_only', 1);\r\n            frm.set_df_property('custom_company_shipping_address', 'hidden', 0);\r\n            frm.set_df_property('custom_get_rate_quote', 'hidden', 0);\r\n            frm.set_df_property('custom_destination_city', 'hidden', 0);\r\n            frm.set_df_property('custom_destination_state', 'hidden', 0);\r\n            frm.set_df_property('custom_destination_postal_code', 'hidden', 0);\r\n            frm.set_df_property('custom_destination_country', 'hidden', 0);\r\n            frm.set_df_property('custom_original_city', 'hidden', 0);\r\n            frm.set_df_property('custom_original_state', 'hidden', 0);\r\n            frm.set_df_property('custom_original_postal_code', 'hidden', 0);\r\n            frm.set_df_property('custom_original_country', 'hidden', 0);\r\n            frm.set_df_property('custom_original_country_code', 'hidden', 0);\r\n            frm.set_df_property('custom_destination_country_code', 'hidden', 0);\r\n            frm.set_df_property('custom_commodity_class', 'hidden', 0);\r\n            frm.set_df_property('custom_commodity_weight', 'hidden', 0);\r\n            frm.set_df_property('custom_accessorials', 'hidden', 0);\r\n        }\r\n    },\r\n    custom_company_shipping_address: function(frm) {\r\n        frappe.call({\r\n            method: 'frappe.client.get_value',\r\n            args: {\r\n                'doctype': 'Address',\r\n                'filters': {'name': frm.doc.custom_company_shipping_address},\r\n                'fieldname': [\r\n                    'city',\r\n                    'state',\r\n                    'country',\r\n                    'pincode'\r\n                ]\r\n            },\r\n            callback: function(r) {\r\n                if (!r.exc) {\r\n                    console.log(r.message);\r\n                    frm.set_value(\"custom_original_city\", r.message.city);\r\n                    frm.set_value(\"custom_original_state\", r.message.state);\r\n                    frm.set_value(\"custom_original_postal_code\", r.message.pincode);\r\n                    frm.set_value(\"custom_original_country\", r.message.country);\r\n                }\r\n            }\r\n        });\r\n    },\r\n    custom_original_country: function(frm) {\r\n        frappe.call({\r\n            method: 'frappe.client.get_value',\r\n            args: {\r\n                'doctype': 'Country',\r\n                'filters': {'name': frm.doc.custom_original_country},\r\n                'fieldname': [\r\n                    'code'\r\n                ]\r\n            },\r\n            callback: function(r) {\r\n                if (!r.exc) {\r\n                    console.log(r.message);\r\n                    frm.set_value(\"custom_original_country_code\", r.message.code);\r\n                }\r\n            }\r\n        });\r\n    },\r\n    // customer_name:function(frm){\r\n    //     frm.set_df_property('custom_use_estes_express_shipping_rate', 'read_only', 0);\r\n    // },\r\n    custom_accessorials:function(frm){\r\n        console.log(frm.doc.custom_accessorials);\r\n    },\r\n    custom_use_estes_express_shipping_rate: function(frm) {\r\n        // if (!frm.doc.customer_name) {\r\n        //     frappe.msgprint(\"First select the customer to make this work\");\r\n        //     frm.set_value(\"custom_use_estes_express_shipping_rate\", 0);\r\n        //     frm.set_df_property('custom_use_estes_express_shipping_rate', 'read_only', 1);\r\n        // } else {\r\n        //     // Set properties to show/hide fields\r\n        //     frm.set_df_property('custom_use_estes_express_shipping_rate', 'read_only', 1);\r\n        //     frm.set_df_property('custom_company_shipping_address', 'hidden', 0);\r\n        //     frm.set_df_property('custom_get_rate_quote', 'hidden', 0);\r\n        //     frm.set_df_property('custom_destination_city', 'hidden', 0);\r\n        //     frm.set_df_property('custom_destination_state', 'hidden', 0);\r\n        //     frm.set_df_property('custom_destination_postal_code', 'hidden', 0);\r\n        //     frm.set_df_property('custom_destination_country', 'hidden', 0);\r\n        //     frm.set_df_property('custom_original_city', 'hidden', 0);\r\n        //     frm.set_df_property('custom_original_state', 'hidden', 0);\r\n        //     frm.set_df_property('custom_original_postal_code', 'hidden', 0);\r\n        //     frm.set_df_property('custom_original_country', 'hidden', 0);\r\n        //     frm.set_df_property('custom_original_country_code', 'hidden', 0);\r\n        //     frm.set_df_property('custom_destination_country_code', 'hidden', 0);\r\n        //     frm.set_df_property('custom_commodity_class', 'hidden', 0);\r\n        //     frm.set_df_property('custom_commodity_weight', 'hidden', 0);\r\n        //     frm.set_df_property('custom_accessorials', 'hidden', 0);\r\n\r\n        //     // Get customer address details\r\n        //     frappe.call({\r\n        //         method: 'frappe.client.get_value',\r\n        //         args: {\r\n        //             'doctype': 'Address',\r\n        //             //'filters': {'name': frm.doc.customer_address},\r\n        //             'filters': {'name': frm.doc.shipping_address_name},\r\n        //             'fieldname': [\r\n        //                 'city',\r\n        //                 'state',\r\n        //                 'country',\r\n        //                 'pincode'\r\n        //                 //'custom_accessorials'\r\n        //             ]\r\n        //         },\r\n        //         callback: function(r) {\r\n        //             if (!r.exc) {\r\n        //                 console.log(r.message);\r\n        //                 frm.set_value(\"custom_destination_city\", r.message.city);\r\n        //                 frm.set_value(\"custom_destination_state\", r.message.state);\r\n        //                 frm.set_value(\"custom_destination_postal_code\", r.message.pincode);\r\n        //                 frm.set_value(\"custom_destination_country\", r.message.country);\r\n        //                 //frm.set_value(\"custom_accessorials\", r.message.custom_accessorials);\r\n        //                 //refresh_field(\"custom_accessorials\");\r\n        //             }\r\n        //         }\r\n        //     });\r\n        // }\r\n    },\r\n    validate:function(frm){\r\n        frm.set_df_property('custom_company_shipping_address', 'hidden', 0);\r\n            frm.set_df_property('custom_get_rate_quote', 'hidden', 0);\r\n            frm.set_df_property('custom_destination_city', 'hidden', 0);\r\n            frm.set_df_property('custom_destination_state', 'hidden', 0);\r\n            frm.set_df_property('custom_destination_postal_code', 'hidden', 0);\r\n            frm.set_df_property('custom_destination_country', 'hidden', 0);\r\n            frm.set_df_property('custom_original_city', 'hidden', 0);\r\n            frm.set_df_property('custom_original_state', 'hidden', 0);\r\n            frm.set_df_property('custom_original_postal_code', 'hidden', 0);\r\n            frm.set_df_property('custom_original_country', 'hidden', 0);\r\n            frm.set_df_property('custom_original_country_code', 'hidden', 0);\r\n            frm.set_df_property('custom_destination_country_code', 'hidden', 0);\r\n            frm.set_df_property('custom_commodity_class', 'hidden', 0);\r\n            frm.set_df_property('custom_commodity_weight', 'hidden', 0);\r\n            frm.set_df_property('custom_accessorials', 'hidden', 0);\r\n    },\r\n    custom_destination_country: function(frm) {\r\n        frappe.call({\r\n            method: 'frappe.client.get_value',\r\n            args: {\r\n                'doctype': 'Country',\r\n                'filters': {'name': frm.doc.custom_destination_country},\r\n                'fieldname': [\r\n                    'code'\r\n                ]\r\n            },\r\n            callback: function(r) {\r\n                if (!r.exc) {\r\n                    console.log(r.message);\r\n                    frm.set_value(\"custom_destination_country_code\", r.message.code);\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    \r\n});\r\n\r\n\r\nfrappe.ui.form.on('Shipping Table', {\r\n\trefresh(frm) {\r\n\t\t// your code here\r\n\t},\r\n\tmarkup:function(frm,cdt,cdn){\r\n        console.log(\"hae  there\")\r\n        var total_freights=0;\r\n        var child_table=locals[cdt][cdn].custom_shipping_quote_rate;\r\n        for (var i = 0; i < frm.doc.custom_shipping_quote_rate.length; i++) {\r\n             console.log(frm.doc.custom_shipping_quote_rate[i])\r\n        var price = parseFloat(frm.doc.custom_shipping_quote_rate[i].total_price);\r\n        var markup=parseFloat(frm.doc.custom_shipping_quote_rate[i].markup)\r\n        var markup_ratio=markup/100\r\n        var cartage_fee=parseFloat(frm.doc.custom_shipping_quote_rate[i].cartage_fee)\r\n        var t = price * markup_ratio;\r\n        var total_freight = price + t + cartage_fee;\r\n        total_freight = total_freight.toFixed(2);\r\n        \r\n        frm.doc.custom_shipping_quote_rate[i].total_freight=total_freight;\r\n        \r\n        }\r\n        // console.log(frm.doc.custom_shipping_quote_rate[0])\r\n        // var price = parseFloat(frm.doc.custom_shipping_quote_rate[0].total_price);\r\n        // var markup=parseFloat(frm.doc.custom_shipping_quote_rate[0].markup)\r\n        // var markup_ratio=markup/100\r\n        // var cartage_fee=parseFloat(frm.doc.custom_shipping_quote_rate[0].cartage_fee)\r\n        // var t = price * markup_ratio;\r\n        // var total_freight = price + t + cartage_fee;\r\n        // total_freight = total_freight.toFixed(2);\r\n        \r\n        // frm.doc.custom_shipping_quote_rate[0].total_freight=total_freight;\r\n        frm.refresh_field(\"custom_shipping_quote_rate\");\r\nif (frm.doc.taxes.length === 0) {\r\n    var i = frm.add_child(\"taxes\", {\r\n        \"charge_type\": \"Actual\",\r\n        \"account_head\": \"460400 - Sales - Freight - DCC\",\r\n        \"description\": \"Freight\",\r\n        \"tax_amount\": total_freights,\r\n    });\r\n    frm.refresh_field(\"taxes\");\r\n} else {\r\n    var freightExists = false;\r\n    for (var i = 0; i < frm.doc.taxes.length; i++) {\r\n        console.log(frm.doc.taxes[i].description);\r\n        if (frm.doc.taxes[i].description === \"Freight\") {\r\n            frm.doc.taxes[i].tax_amount = total_freights;\r\n            freightExists = true;\r\n            break; // No need to continue the loop once found\r\n        }\r\n    }\r\n    if (!freightExists) {\r\n        var i = frm.add_child(\"taxes\", {\r\n            \"charge_type\": \"Actual\",\r\n            \"account_head\": \"460400 - Sales - Freight - DCC\",\r\n            \"description\": \"Freight\",\r\n            \"tax_amount\": total_freights,\r\n        });\r\n    }\r\n    frm.refresh_field(\"taxes\");\r\n}\r\n        \r\n    },\r\n    cartage_fee:function(frm,cdt,cdn){\r\n        console.log(\"hae  there\")\r\n        var total_freights=0;\r\n        var child_table=locals[cdt][cdn].custom_shipping_quote_rate;\r\n        for (var i = 0; i < frm.doc.custom_shipping_quote_rate.length; i++) {\r\n             console.log(frm.doc.custom_shipping_quote_rate[i])\r\n        var price = parseFloat(frm.doc.custom_shipping_quote_rate[i].total_price);\r\n        var markup=parseFloat(frm.doc.custom_shipping_quote_rate[i].markup)\r\n        var markup_ratio=markup/100\r\n        var cartage_fee=parseFloat(frm.doc.custom_shipping_quote_rate[i].cartage_fee)\r\n        var t = price * markup_ratio;\r\n        var total_freight = price + t + cartage_fee;\r\n        total_freight = total_freight.toFixed(2);\r\n        \r\n        frm.doc.custom_shipping_quote_rate[i].total_freight=total_freight;\r\n        total_freights=parseFloat(total_freights)+parseFloat(total_freight)\r\n        }\r\n        // console.log(frm.doc.custom_shipping_quote_rate[0])\r\n        // var price = parseFloat(frm.doc.custom_shipping_quote_rate[0].total_price);\r\n        // var markup=parseFloat(frm.doc.custom_shipping_quote_rate[0].markup)\r\n        // var markup_ratio=markup/100\r\n        // var cartage_fee=parseFloat(frm.doc.custom_shipping_quote_rate[0].cartage_fee)\r\n        // var t = price * markup_ratio;\r\n        // var total_freight = price + t + cartage_fee;\r\n        // total_freight = total_freight.toFixed(2);\r\n        \r\n        // frm.doc.custom_shipping_quote_rate[0].total_freight=total_freight;\r\n        frm.refresh_field(\"custom_shipping_quote_rate\");\r\n        console.log(frm.doc.taxes)\r\nif (frm.doc.taxes.length === 0) {\r\n    var i = frm.add_child(\"taxes\", {\r\n        \"charge_type\": \"Actual\",\r\n        \"account_head\": \"460400 - Sales - Freight - DCC\",\r\n        \"description\": \"Freight\",\r\n        \"tax_amount\": total_freights,\r\n    });\r\n    frm.refresh_field(\"taxes\");\r\n} else {\r\n    var freightExists = false;\r\n    for (var i = 0; i < frm.doc.taxes.length; i++) {\r\n        console.log(frm.doc.taxes[i].description);\r\n        if (frm.doc.taxes[i].description === \"Freight\") {\r\n            frm.doc.taxes[i].tax_amount = total_freights;\r\n            freightExists = true;\r\n            break; // No need to continue the loop once found\r\n        }\r\n    }\r\n    if (!freightExists) {\r\n        var i = frm.add_child(\"taxes\", {\r\n            \"charge_type\": \"Actual\",\r\n            \"account_head\": \"460400 - Sales - Freight - DCC\",\r\n            \"description\": \"Freight\",\r\n            \"tax_amount\": total_freights,\r\n        });\r\n    }\r\n    frm.refresh_field(\"taxes\");\r\n}\r\n\r\n    },\r\n    total_price:function(frm,cdt,cdn){\r\n        console.log(\"hae  there\")\r\n        var total_freights=0;\r\n        var child_table=locals[cdt][cdn].custom_shipping_quote_rate;\r\n        for (var i = 0; i < frm.doc.custom_shipping_quote_rate.length; i++) {\r\n             console.log(frm.doc.custom_shipping_quote_rate[i])\r\n        var price = parseFloat(frm.doc.custom_shipping_quote_rate[i].total_price);\r\n        var markup=parseFloat(frm.doc.custom_shipping_quote_rate[i].markup)\r\n        var markup_ratio=markup/100\r\n        var cartage_fee=parseFloat(frm.doc.custom_shipping_quote_rate[i].cartage_fee)\r\n        var t = price * markup_ratio;\r\n        var total_freight = price + t + cartage_fee;\r\n        total_freight = total_freight.toFixed(2);\r\n        \r\n        frm.doc.custom_shipping_quote_rate[i].total_freight=total_freight;\r\n        total_freights=parseFloat(total_freights)+parseFloat(total_freight)\r\n        }\r\n        // console.log(frm.doc.custom_shipping_quote_rate[0])\r\n        // var price = parseFloat(frm.doc.custom_shipping_quote_rate[0].total_price);\r\n        // var markup=parseFloat(frm.doc.custom_shipping_quote_rate[0].markup)\r\n        // var markup_ratio=markup/100\r\n        // var cartage_fee=parseFloat(frm.doc.custom_shipping_quote_rate[0].cartage_fee)\r\n        // var t = price * markup_ratio;\r\n        // var total_freight = price + t + cartage_fee;\r\n        // total_freight = total_freight.toFixed(2);\r\n        \r\n        // frm.doc.custom_shipping_quote_rate[0].total_freight=total_freight;\r\n        frm.refresh_field(\"custom_shipping_quote_rate\");\r\n        console.log(frm.doc.taxes)\r\nif (frm.doc.taxes.length === 0) {\r\n    var i = frm.add_child(\"taxes\", {\r\n        \"charge_type\": \"Actual\",\r\n        \"account_head\": \"460400 - Sales - Freight - DCC\",\r\n        \"description\": \"Freight\",\r\n        \"tax_amount\": total_freights,\r\n    });\r\n    frm.refresh_field(\"taxes\");\r\n} else {\r\n    var freightExists = false;\r\n    for (var i = 0; i < frm.doc.taxes.length; i++) {\r\n        console.log(frm.doc.taxes[i].description);\r\n        if (frm.doc.taxes[i].description === \"Freight\") {\r\n            frm.doc.taxes[i].tax_amount = total_freights;\r\n            freightExists = true;\r\n            break; // No need to continue the loop once found\r\n        }\r\n    }\r\n    if (!freightExists) {\r\n        var i = frm.add_child(\"taxes\", {\r\n            \"charge_type\": \"Actual\",\r\n            \"account_head\": \"460400 - Sales - Freight - DCC\",\r\n            \"description\": \"Freight\",\r\n            \"tax_amount\": total_freights,\r\n        });\r\n    }\r\n    frm.refresh_field(\"taxes\");\r\n}\r\n    }\r\n})",
  "view": "Form"
 }
]